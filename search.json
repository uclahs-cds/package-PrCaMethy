[{"path":[]},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/PULL_REQUEST_TEMPLATE.html","id":"case-1","dir":"","previous_headings":"Testing Results","what":"Case 1","title":"NA","text":"input code output ### Case 2 input code output","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/articles/Introduction.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction","text":"PrCaMethy package provides resources predicting clinical molecular features prostate cancer DNA methylation data. overview vignette: Input data explains required format input data estimate.subtypes assigns patients one four prostate cancer DNA methylation subtypes. gene.methylation calculates gene-level methylation estimate.features predicts clinical molecular features Quick start: putting together gives concise example use functions package. overview 3 main R functions shown diagram :","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/articles/Introduction.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Introduction","text":"Users input data.frame containing beta-values (continuous proportions 0 1) CpG sites Illumina Infinium Methylation 450K BeadChip array. list CpGs annotation data can obtained IlluminaHumanMethylation450kanno.ilmn12.hg19 R package. Ideally, user ~480k CpGs Illumina 450K methylation array. However, functions package written try estimate many features possible given CpGs . example dataset used throughout tutorial: Notice patients rows (rownames give patient ids) CpGs columns CpG ids column names.","code":"data(example.data, package = 'PrCaMethy'); dim(example.data); ## [1]     2 93031 example.data[,1:5]; ##              cg00212031 cg00214611 cg01707559 cg02839557 cg02842889 ## TCGA-CH-5739  0.7147803 0.02184841 0.05281749 0.01970460  0.0284529 ## TCGA-HC-7079  0.0385789 0.02315141 0.09531891 0.03250703  0.0298547"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/articles/Introduction.html","id":"estimate-subtypes","dir":"Articles","previous_headings":"","what":"estimate.subtypes","title":"Introduction","text":"making sure methylation dataset correct format (see Input data), can use estimate.subtypes assign patient one four prostate cancer DNA methylation subtypes (named ‘MS-1’ ‘MS-4’). subtypes derived forthcoming manuscript. First, let’s check whether required CpGs predicting subtypes: check$val.passed logical indicating whether data passed validation check$required.cpgs vector CpG ids required predicting subtypes check$missing.cpgs vector CpG ids required completely missing data check$required.cpgs..high.missing vector CpG ids required proportion missing values greater prop.missing.cutoff (default 0.3) Given validation passed, required CpGs predicting subtypes: manuscript, subtypes interpreted follows: MS-1 MS-2 better prognosis MS-2 similar normal tissue MS-4 highest risk biochemical disease recurrence, followed MS-3. MS-4, followed MS-3, higher risk copy number alterations, somatic driver mutations higher global mutation density.","code":"check <- validate.subtype.model.cpgs(example.data); check$val.passed; ## [1] TRUE subtypes <- estimate.subtypes(     methy.data = example.data     ); subtypes; ##              subtype ## TCGA-CH-5739    MS-3 ## TCGA-HC-7079    MS-2"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/articles/Introduction.html","id":"gene-methylation","dir":"Articles","previous_headings":"","what":"gene.methylation","title":"Introduction","text":"can predict clinical molecular features, need calculate gene-level methylation. Specifically, gene-level methylation calculated median beta-value among CpG islands gene promoter region. calculate gene-level methylation, run following code (may take several minutes): However, save time, precomputed dataset can use rest tutorial:","code":"example.data.gene.methy <- gene.methylation(example.data); data(example.data.gene.methy, package = 'PrCaMethy'); dim(example.data.gene.methy); ## [1]     2 13622 example.data.gene.methy[,1:5]; ##                   NIPA2       CNBP      DDX55     MRPS25      MAEL ## TCGA-CH-5739 0.02423149 0.04711574 0.02644465 0.04235761 0.9631823 ## TCGA-HC-7079 0.01747738 0.04769987 0.01902647 0.03233640 0.9473169"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/articles/Introduction.html","id":"estimate-features","dir":"Articles","previous_headings":"","what":"estimate.features","title":"Introduction","text":"Now gene-level methylation data, can predict several clinical molecular features. models used predict features derived validated forthcoming manuscript. Currently package supports predicting following features: n.required.genes lists number required genes predict feature. can see required gene names lapply(.models, function(x) x$xNames). Feature names prefix “log2p1” means \\(log_2(x + 1)\\) transformation applied. check whether required genes predict feature: check$val.passed boolean vector indicating whether required genes predict features. check$features..can.predict logical vector indicating features can predict (.e. required genes missing data rates < prop.missing.cutoff) check$required.genes list required genes predicting feature. check$missing.genes list missing genes required predicting feature. check$required.genes..high.missing list genes high missing data (.e. proportion missing data exceeds cutoff argument prop.missing.cutoff, default = 0.3) Given data passed validation, means can predict features dataset:","code":"data(all.models, package = 'PrCaMethy'); features <- names(all.models); features <- sapply(     X = features,     FUN = function(x) {       n.required.genes <- length(all.models[[x]]$xNames);       }     ); features <- data.frame(feature = names(features), n.required.genes = features); rownames(features) <- NULL; features[order(features$n.required.genes),]; ##                 feature n.required.genes ## 4       psa.categorical               10 ## 7       NKX3-1.cna.loss               10 ## 8          MYC.cna.gain               10 ## 11         RB1.cna.loss               10 ## 9         PTEN.cna.loss               50 ## 10      CDKN1B.cna.loss              100 ## 2            ISUP.grade             1000 ## 5                   pga             1000 ## 6         CHD1.cna.loss             1000 ## 1        age.continuous             5000 ## 3            t.category             5000 ## 14 log2p1.snvs.per.mbps             5000 ## 12        CDH1.cna.loss            13603 ## 13        TP53.cna.loss            13603 check <- validate.gene.methy.data(     gene.methy.data = example.data.gene.methy,     models = all.models     ); check$val.passed; ## [1] TRUE features <- estimate.features(     gene.methy.data = example.data.gene.methy,     models = all.models     ); str(features$features); ## 'data.frame':    2 obs. of  14 variables: ##  $ age.continuous      : num  61.5 60.7 ##  $ ISUP.grade          : Factor w/ 5 levels \"ISUP1\",\"ISUP2\",..: 3 2 ##  $ t.category          : Factor w/ 4 levels \"T1\",\"T2\",\"T3\",..: 3 2 ##  $ psa.categorical     : Factor w/ 3 levels \"psa_lt_10\",\"psa_10_19.9\",..: 1 1 ##  $ pga                 : num  25.6 10.9 ##  $ CHD1.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ NKX3.1.cna.loss     : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ MYC.cna.gain        : Factor w/ 2 levels \"Yes\",\"No\": 1 2 ##  $ PTEN.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ CDKN1B.cna.loss     : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ RB1.cna.loss        : Factor w/ 2 levels \"Yes\",\"No\": 1 2 ##  $ CDH1.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ TP53.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ log2p1.snvs.per.mbps: num  1.026 0.545"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/articles/Introduction.html","id":"quick-start-putting-it-all-together","dir":"Articles","previous_headings":"","what":"Quick start: putting it all together","title":"Introduction","text":"previous sections, called different validate functions verify data correct. educational purposes, actually validate functions called automatically functions, thus can simplify code: Lastly, can merge predicted subtypes features single data.frame:","code":"library(PrCaMethy);  ### prepare your data # patients are in rows (rownames give patient ids) with CpG ids as the column names. data(example.data, package = 'PrCaMethy'); example.data[,1:5];  ### predict methylation subtypes subtypes <- estimate.subtypes(     methy.data = example.data     ); table(subtypes$subtype);  ### calculate gene methylation data example.data.gene.methy <- gene.methylation(example.data); example.data.gene.methy[,1:5];  ### predict clinical and molecular features features <- estimate.features(     gene.methy.data = example.data.gene.methy,     models = all.models     ); str(features$features); results <- merge(     x = subtypes,     y = features$features,     by = 'row.names',     all = TRUE     ); str(results); ## 'data.frame':    2 obs. of  16 variables: ##  $ Row.names           : 'AsIs' chr  \"TCGA-CH-5739\" \"TCGA-HC-7079\" ##  $ subtype             : Factor w/ 4 levels \"MS-1\",\"MS-2\",..: 3 2 ##  $ age.continuous      : num  61.5 60.7 ##  $ ISUP.grade          : Factor w/ 5 levels \"ISUP1\",\"ISUP2\",..: 3 2 ##  $ t.category          : Factor w/ 4 levels \"T1\",\"T2\",\"T3\",..: 3 2 ##  $ psa.categorical     : Factor w/ 3 levels \"psa_lt_10\",\"psa_10_19.9\",..: 1 1 ##  $ pga                 : num  25.6 10.9 ##  $ CHD1.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ NKX3.1.cna.loss     : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ MYC.cna.gain        : Factor w/ 2 levels \"Yes\",\"No\": 1 2 ##  $ PTEN.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ CDKN1B.cna.loss     : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ RB1.cna.loss        : Factor w/ 2 levels \"Yes\",\"No\": 1 2 ##  $ CDH1.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ TP53.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 ##  $ log2p1.snvs.per.mbps: num  1.026 0.545"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jaron Arbet. Author, maintainer. Paul C. Boutros. Author.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jaron Arbet, Paul C. Boutros (2025). PrCaMethy: Prostate Cancer Methylation. R package version 0.1.0, https://upgraded-sniffle-wgqe7j1.pages.github.io/.","code":"@Manual{,   title = {PrCaMethy: Prostate Cancer Methylation},   author = {{Jaron Arbet} and {Paul C. Boutros}},   year = {2025},   note = {R package version 0.1.0},   url = {https://upgraded-sniffle-wgqe7j1.pages.github.io/}, }"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/index.html","id":"prcamethy","dir":"","previous_headings":"","what":"Prostate Cancer Methylation","title":"Prostate Cancer Methylation","text":"PrCaMethy package offers tools predicting clinical molecular features using prostate cancer DNA methylation data generated Illumina 450K array. tutorial, see Introduction vignette/article.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prostate Cancer Methylation","text":"install latest version GitHub:","code":"remotes::install_github('uclahs-cds/package-PrCaMethy');"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Prostate Cancer Methylation","text":"Author: Jaron Arbet(jarbet@mednet.ucla.edu), Paul C. Boutros program licensed GNU General Public License version 2. See file LICENSE.md terms GNU GPL license. Copyright (C) 2024-2025 University California Los Angeles (“Boutros Lab”) rights reserved. program free software; can redistribute /modify terms GNU General Public License published Free Software Foundation; either version 2 License, (option) later version. program distributed hope useful, WITHOUT WARRANTY; without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE. See GNU General Public License details.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/all.models.html","id":null,"dir":"Reference","previous_headings":"","what":"Models for predicting clinical and molecular features — all.models","title":"Models for predicting clinical and molecular features — all.models","text":"Random forest glmnet models predicting various clinical molecular features patients diagnosed prostate cancer. predictors gene-level methylation estimated gene.methylation.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/all.models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Models for predicting clinical and molecular features — all.models","text":"","code":"all.models"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/all.models.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Models for predicting clinical and molecular features — all.models","text":"object class list length 14.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/all.models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Models for predicting clinical and molecular features — all.models","text":"Models available predicting following features: age.continuous: patient age years ISUP.grade: International Society Urological Pathology (ISUP) grade risk group (1-5). See details. t.category: TNM tumour category (1-4), measures size extent primary tumour psa.categorical: Prostate-specific antigen (PSA) category: <= 10, [10, 20), >= 20 ng/mL. pga: percentage genome altered defined PGA = (base-pair length genome regions gain loss) / 3.2 billion bases * 100 <gene>.cna.<loss/gain>: features .cna. name give gene name identify whether copy number loss gain event.  See Examples section full list cna features. log2p1.snvs.per.mbps: single nucleotide variants (SNVs) per mega-base pairs (Mbps) log2(x + 1) transformation.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/all.models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Models for predicting clinical and molecular features — all.models","text":"","code":"data(all.models);  # Models for predicting the following features: names(all.models); #>  [1] \"age.continuous\"       \"ISUP.grade\"           \"t.category\"           #>  [4] \"psa.categorical\"      \"pga\"                  \"CHD1.cna.loss\"        #>  [7] \"NKX3-1.cna.loss\"      \"MYC.cna.gain\"         \"PTEN.cna.loss\"        #> [10] \"CDKN1B.cna.loss\"      \"RB1.cna.loss\"         \"CDH1.cna.loss\"        #> [13] \"TP53.cna.loss\"        \"log2p1.snvs.per.mbps\"  # Model class per feature, e.g. randomForest or glmnet: lapply(all.models, class); #> $age.continuous #> [1] \"randomForest\" #>  #> $ISUP.grade #> [1] \"multnet\" \"glmnet\"  #>  #> $t.category #> [1] \"randomForest\" #>  #> $psa.categorical #> [1] \"randomForest\" #>  #> $pga #> [1] \"randomForest\" #>  #> $CHD1.cna.loss #> [1] \"lognet\" \"glmnet\" #>  #> $`NKX3-1.cna.loss` #> [1] \"randomForest\" #>  #> $MYC.cna.gain #> [1] \"randomForest\" #>  #> $PTEN.cna.loss #> [1] \"lognet\" \"glmnet\" #>  #> $CDKN1B.cna.loss #> [1] \"lognet\" \"glmnet\" #>  #> $RB1.cna.loss #> [1] \"randomForest\" #>  #> $CDH1.cna.loss #> [1] \"lognet\" \"glmnet\" #>  #> $TP53.cna.loss #> [1] \"lognet\" \"glmnet\" #>  #> $log2p1.snvs.per.mbps #> [1] \"randomForest\" #>   # Required genes for predicting each feature: # lapply(all.models, function(x) x$xNames)"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.features.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict clinical and molecular features — estimate.features","title":"Predict clinical and molecular features — estimate.features","text":"Main function used predict various clinical molecular features gene-level methylation data prostate cancer patients.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict clinical and molecular features — estimate.features","text":"","code":"estimate.features(   gene.methy.data,   models,   prop.missing.cutoff = 0.3,   validate.data = TRUE )"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict clinical and molecular features — estimate.features","text":"gene.methy.data data frame gene-level methylation data, created gene.methylation.  Patients rows columns genes. models list models used predict features gene-level methylation data.  models come data('.models'). prop.missing.cutoff maximum proportion missing values allowed required gene. validate.data TRUE/FALSE, whether validate input data.  generally always TRUE, developers may set FALSE speedup testing/development.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict clinical and molecular features — estimate.features","text":"list following objects: features data frame predicted features columns patients rows validation results validation checks telling features able predict.  See validate.gene.methy.data details.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict clinical and molecular features — estimate.features","text":"","code":"data('all.models');  ### example gene-level methylation data data('example.data.gene.methy'); # note this dataset is derived from the following commands: # data('example.data'); # example.data.gene.methy <- gene.methylation(example.data);  features <- estimate.features(example.data.gene.methy, all.models); str(features$features); #> 'data.frame':\t2 obs. of  14 variables: #>  $ age.continuous      : num  61.5 60.7 #>  $ ISUP.grade          : Factor w/ 5 levels \"ISUP1\",\"ISUP2\",..: 3 2 #>  $ t.category          : Factor w/ 4 levels \"T1\",\"T2\",\"T3\",..: 3 2 #>  $ psa.categorical     : Factor w/ 3 levels \"psa_lt_10\",\"psa_10_19.9\",..: 1 1 #>  $ pga                 : num  25.6 10.9 #>  $ CHD1.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 #>  $ NKX3.1.cna.loss     : Factor w/ 2 levels \"Yes\",\"No\": 2 2 #>  $ MYC.cna.gain        : Factor w/ 2 levels \"Yes\",\"No\": 1 2 #>  $ PTEN.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 #>  $ CDKN1B.cna.loss     : Factor w/ 2 levels \"Yes\",\"No\": 2 2 #>  $ RB1.cna.loss        : Factor w/ 2 levels \"Yes\",\"No\": 1 2 #>  $ CDH1.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 #>  $ TP53.cna.loss       : Factor w/ 2 levels \"Yes\",\"No\": 2 2 #>  $ log2p1.snvs.per.mbps: num  1.026 0.545"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.subtypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict methylation subtype — estimate.subtypes","title":"Predict methylation subtype — estimate.subtypes","text":"Assign patients four prostate cancer DNA methylation subtypes","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.subtypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict methylation subtype — estimate.subtypes","text":"","code":"estimate.subtypes(   methy.data,   prop.missing.cutoff = 0.3,   impute.using.all.cpgs = TRUE )"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.subtypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict methylation subtype — estimate.subtypes","text":"methy.data data.frame patients rows (rownames give patient ids) column names give CpG ids. prop.missing.cutoff maximum proportion missing values allowed required CpG. KNN imputation used impute missing values. impute.using..cpgs TRUE/FALSE indicating whether impute missing values using CpGs methy.data CpGs required subtype.model.  TRUE, imputation slower use memory, accurate.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/estimate.subtypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict methylation subtype — estimate.subtypes","text":"","code":"data('subtype.model');  ### example CpG data data('example.data');  subtypes <- estimate.subtypes(example.data); head(subtypes); #>              subtype #> TCGA-CH-5739    MS-3 #> TCGA-HC-7079    MS-2"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/example.data.gene.methy.html","id":null,"dir":"Reference","previous_headings":"","what":"Example gene methylation dataset — example.data.gene.methy","title":"Example gene methylation dataset — example.data.gene.methy","text":"Example dataset TCGA-PRAD patients gene-level prostate cancer DNA methylation data.  columns contain median beta-value among CpG islands gene promoter region. See gene.methylation example showing calculate gene-level methylation data.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/example.data.gene.methy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example gene methylation dataset — example.data.gene.methy","text":"","code":"example.data.gene.methy"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/example.data.gene.methy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example gene methylation dataset — example.data.gene.methy","text":"object class data.frame 2 rows 13622 columns.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/example.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example CpG methylation dataset — example.data","title":"Example CpG methylation dataset — example.data","text":"Example dataset TCGA-PRAD patients prostate cancer DNA methylation data.  columns CpG methylation beta-values.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/example.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example CpG methylation dataset — example.data","text":"","code":"example.data"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/example.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example CpG methylation dataset — example.data","text":"object class matrix (inherits array) 2 rows 93031 columns.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/gene.methylation.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene-level methylation — gene.methylation","title":"Gene-level methylation — gene.methylation","text":"Calculate gene-level methylation dataset containing CpGs Illumina 450k methylation array. Gene-level methylation calculated median beta-value among CpG islands gene promoter region.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/gene.methylation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene-level methylation — gene.methylation","text":"","code":"gene.methylation(methy, print.progress = TRUE)"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/gene.methylation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene-level methylation — gene.methylation","text":"methy methylation dataset rownames give patient ids columns use CpG ids print.progress TRUE/FALSE show progress bar","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/gene.methylation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene-level methylation — gene.methylation","text":"","code":"data(example.data);  ### full example (may take a few mins to run) #example.data.gene.methy <- gene.methylation(example.data);  ### fast example set.seed(123); example.data <- example.data[,sample(1:ncol(example.data), 10)]; example.data.gene.methy <- gene.methylation(example.data);"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/gene.promoter.cpgi.html","id":null,"dir":"Reference","previous_headings":"","what":"CpG islands in the gene promoter region — gene.promoter.cpgi","title":"CpG islands in the gene promoter region — gene.promoter.cpgi","text":"List genes element gives vector CpG islands promoter region gene.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/gene.promoter.cpgi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CpG islands in the gene promoter region — gene.promoter.cpgi","text":"","code":"gene.promoter.cpgi"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/gene.promoter.cpgi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CpG islands in the gene promoter region — gene.promoter.cpgi","text":"object class list length 13952.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/subtype.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model for predicting methylation subtype — subtype.model","title":"Model for predicting methylation subtype — subtype.model","text":"pamr model used assigning new patients four prostate cancer DNA methylation subtypes.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/subtype.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model for predicting methylation subtype — subtype.model","text":"","code":"subtype.model"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/subtype.model.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model for predicting methylation subtype — subtype.model","text":"object class pamrtrained length 23.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.gene.methy.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input data for gene.methylation() — validate.gene.methy.data","title":"Validate input data for gene.methylation() — validate.gene.methy.data","text":"Check whether gene.methy.data contains genes required models acceptable level missingness required gene. Note genes acceptable levels missing values later imputed using KNN imputation calling estimate.features. rather use different imputation method, make sure impute missing values calling estimate.features.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.gene.methy.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input data for gene.methylation() — validate.gene.methy.data","text":"","code":"validate.gene.methy.data(gene.methy.data, models, prop.missing.cutoff = 0.3)"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.gene.methy.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input data for gene.methylation() — validate.gene.methy.data","text":"gene.methy.data data frame gene-level methylation data, created gene.methylation.  Patients rows columns genes. models list models used predict features gene-level methylation data.  models come data('.models'). prop.missing.cutoff maximum proportion missing values allowed required gene.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.gene.methy.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate input data for gene.methylation() — validate.gene.methy.data","text":"val.passed logical indicating whether data passed validation features..can.predict logical vector indicating features can predict (.e. required genes missing data rates < prop.missing.cutoff) required.genes list genes required model missing.genes list genes required completely missing data required.genes..high.missing list genes required proportion missing values greater prop.missing.cutoff","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.gene.methy.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate input data for gene.methylation() — validate.gene.methy.data","text":"","code":"data('all.models');  ### example gene-level methylation data data('example.data.gene.methy'); # note this dataset is derived from the following commands: # data('example.data'); # example.data.gene.methy <- gene.methylation(example.data); check <- validate.gene.methy.data(example.data.gene.methy, all.models); stopifnot(check$val.passed);  # genes required to fit each model: #check$required.genes;  # genes that are required but completely missing in your data: #check$missing.genes;  # genes that are required and have a proportion of missing values greater than `prop.missing.cutoff` #check$required.genes.with.high.missing;"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.subtype.model.cpgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input data for estimate.subtypes() — validate.subtype.model.cpgs","title":"Validate input data for estimate.subtypes() — validate.subtype.model.cpgs","text":"Check whether methy.data contains CpGs required subtype.model assigning patients four prostate cancer DNA methylation subtypes.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.subtype.model.cpgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input data for estimate.subtypes() — validate.subtype.model.cpgs","text":"","code":"validate.subtype.model.cpgs(methy.data, prop.missing.cutoff = 0.3)"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.subtype.model.cpgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input data for estimate.subtypes() — validate.subtype.model.cpgs","text":"methy.data data.frame patients rows (rownames give patient ids) column names give CpG ids. prop.missing.cutoff maximum proportion missing values allowed required CpG. KNN imputation used impute missing values.","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.subtype.model.cpgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate input data for estimate.subtypes() — validate.subtype.model.cpgs","text":"val.passed logical indicating whether data passed validation check$required.cpgs vector CpG ids required predicting subtypes missing.cpgs vector CpG ids required completely missing data required.cpgs..high.missing vector CpG ids required proportion missing values greater prop.missing.cutoff","code":""},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/reference/validate.subtype.model.cpgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate input data for estimate.subtypes() — validate.subtype.model.cpgs","text":"","code":"data('example.data'); check <- validate.subtype.model.cpgs(example.data); stopifnot(check$val.passed);  # CpGs required to fit each model: #check$required.cpgs;  # CpGs that are required but completely missing in your data: #check$missing.cpgs;  # CpGs that are required and have a proportion of missing values greater than `prop.missing.cutoff` #check$required.cpgs.with.high.missing;"},{"path":"https://upgraded-sniffle-wgqe7j1.pages.github.io/news/index.html","id":"prcamethy-010-2025-02-12","dir":"Changelog","previous_headings":"","what":"PrCaMethy 0.1.0 (2025-02-12)","title":"PrCaMethy 0.1.0 (2025-02-12)","text":"First release package.","code":""}]
